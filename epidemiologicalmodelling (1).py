# -*- coding: utf-8 -*-
"""EpidemiologicalModelling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u22cUAbLHP8r9OMSoS4dcJuJMmSaCKu2
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
from scipy.integrate import solve_ivp

uploaded = files.upload()

data = pd.read_csv("Infectious Disease 2001-2014.csv")

data.head()

county_data = data[(data["County"]=="California") & data["Disease"] == "Amebiasis"]
county_data = county_data.sort_values(by="Year")

def SIR_model(t,y,beta,gamma):
  S,I,R = y
  dSdt = -beta * S * I
  dIdt = beta * S * I - gamma * I
  dRdt = gamma * I
  return [dSdt,dIdt,dRdt]

def SIR_model(t, y, beta, gamma):
    S, I, R = y
    dSdt = -beta * S * I
    dIdt = beta * S * I - gamma * I
    dRdt = gamma * I
    return [dSdt, dIdt, dRdt]

#beta = 0.2
#gamma = 0.1
#initial_conditions = [1.0, 0.01, 0]
beta = 0.2  # Transmission rate
gamma = 0.1  # Recovery rate
initial_conditions = [1.0, 0.01, 0.0]

#county_data["Beta"] = county_data["Rate"]
#t_span = (0, len(county_data))
county_data['beta'] = county_data['Rate'] / county_data['Count']
t_span = (0, len(county_data))  # Time span based on the data

#solution = solve_ivp(SIR_model,t_span,initial_conditions, args=(beta,gamma), t_eval = np.arange(0,len(county_data),1))
solution = solve_ivp(SIR_model, t_span, initial_conditions, args=(beta, gamma), t_eval=np.arange(0, len(county_data), 1))

t = solution.t
S, I, R = solution.y

plt.figure(figsize=(10,6))
plt.plot(t,S,label="Susceptible")
plt.plot(t,I,label="Infectious")
plt.plot(t,R,label="Recovered")
plt.xlabel("Time (Year)")
plt.ylabel("Proportion of Population")
plt.title("SIR Model for Amebiasis in California")
plt.legend()
plt.grid(True)
plt.show()